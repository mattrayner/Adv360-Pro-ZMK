#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        #include "macros.dtsi"
      #include "version.dtsi"
      #ifndef VERSION_MACRO

        macro_ver: macro_ver {
            compatible = "zmk,behavior-macro";
            label = "macro_version";
            #binding-cells = <0>;
            bindings = <&kp RET>;
        };

        #endif

        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <175>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <150>;
            global-quick-tap;
            flavor = "balanced";
            hold-trigger-key-positions = <7 8 9 10 11 12 13 21 22 23 24 25 26 27 38 39 40 41 42 43 44 45 54 55 56 57 58 59 71 72 73 74 75 35 36 37 38 52 53 65 66 67 68 69 70 71>;
            hold-trigger-on-release;
        };

        cpy_pst: cpy_pst {
            compatible = "zmk,behavior-tap-dance";
            label = "CPY_PST";
            #binding-cells = <0>;
            bindings = <&kp LG(C)>, <&kp LG(V)>;

            tapping-term-ms = <125>;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            global-quick-tap;
            flavor = "balanced";
            hold-trigger-key-positions = <0 1 2 3 4 5 6 14 15 16 17 18 19 20 28 29 30 31 32 33 34 35 36 37 38 46 47 48 49 50 51 52 53 60 61 62 63 64 65 66 67 68 69 70>;
            hold-trigger-on-release;
        };

        as_ht: autoshift_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "AUTOSHIFT_HOLD_TAP";
            bindings = <&shift>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <190>;
            flavor = "tap-preferred";
        };
    };

    combos {
        compatible = "zmk,combos";

        sleep {
            bindings = <&kt LA(LG(C_EJECT))>;
            key-positions = <0 13>;
        };
    };

    macros {
        shift: shift {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&macro_press>,
                <&kp LEFT_SHIFT>,
                <&macro_tap>,
                <&macro_param_1to1 &kp MACRO_PLACEHOLDER>,
                <&macro_release>,
                <&kp LEFT_SHIFT>;

            label = "SHIFT";
        };

        as: as {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&macro_press>,
                <&macro_param_1to1 &macro_param_1to2 &as_ht MACRO_PLACEHOLDER MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&macro_param_1to1 &macro_param_1to2 &as_ht MACRO_PLACEHOLDER MACRO_PLACEHOLDER>;

            label = "AS";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&hml LS(LC(LG(LEFT_ALT))) ESC  &caps_word        &as GRAVE        &as EQUAL     &as MINUS       &cpy_pst                     &kp F11                                                                                              &kp F12                        &kp LEFT_BRACE               &kp RIGHT_BRACE     &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS    &kp LEFT_BRACKET  &kp RIGHT_BRACKET
&kp TAB                        &kp Q             &kp W            &kp F         &kp P           &kp B                        &mt LEFT_BRACE LEFT_BRACKET                                                                          &mt RIGHT_BRACE RIGHT_BRACKET  &kp J                        &kp L               &kp U                 &kp Y                    &as SEMICOLON     &as BACKSLASH
&kp DEL                        &hml LCTRL A      &hml LEFT_ALT R  &hml LGUI S   &hml LSHIFT T   &hml LS(LC(LG(LEFT_ALT))) G  &kp MINUS                    &kp LEFT_SHIFT  &kp LG(V)             &kp LS(LG(C))      &kp RIGHT_ALT  &kp EQUAL                      &hmr LS(LC(LG(LEFT_ALT))) M  &hmr RIGHT_SHIFT N  &hmr LEFT_GUI E       &hmr LEFT_ALT I          &hmr RCTRL O      &kp BSPC
&mt LEFT_SHIFT SINGLE_QUOTE    &kp Z             &kp X            &kp C         &kp D           &kp V                                                                     &kp LS(LG(LBKT))      &kp LS(LG(RBKT))                                                 &kp K                        &kp H               &mt LESS_THAN COMMA   &mt GREATER_THAN PERIOD  &as SLASH         &hmr LEFT_SHIFT DOUBLE_QUOTES
&mo 1                          &kp LEFT_CONTROL  &kp LEFT_ALT     &kp LEFT_GUI  &kp LEFT_SHIFT                               &kp SPACE                    &kp BACKSPACE   &kp SINGLE_QUOTE      &kp DOUBLE_QUOTES  &to 1          &kp RETURN                                                  &kp LEFT            &kp DOWN              &kp UP                   &kp RIGHT         &mo 1
            >;
        };

        num_nav {
            bindings = <
&bootloader   &kp F1         &kp F2  &kp F3  &kp F4  &kp F5      &trans                                      &trans  &kp F6      &kp F7           &kp F8        &kp F9      &kp F10      &bootloader
&kp ASTERISK  &kp MINUS      &as N7  &as N8  &as N9  &kp PLUS    &trans                                      &trans  &trans      &kp HOME         &kp LG(DOWN)  &kp LG(UP)  &kp END      &trans
&kp SLASH     &kp BACKSPACE  &as N4  &as N5  &as N6  &kp ENTER   &trans  &trans  &trans      &trans  &trans  &trans  &kp LA(N3)  &kp LEFT         &kp DOWN      &kp UP      &kp RIGHT    &kp DOLLAR
&kp EQUAL     &kp SPACE      &as N1  &as N2  &as N3  &kp PERIOD                  &trans      &trans                  &trans      &kp LC(LS(TAB))  &kp PG_DN     &kp PG_UP   &kp LC(TAB)  &trans
&trans        &trans         &trans  &trans  &trans              &to 0   &as N0  &trans      &trans  &to 2   &trans              &trans           &trans        &trans      &trans       &trans
            >;

            label = "num_nav";
        };

        sys {
            bindings = <
&trans  &trans        &trans        &trans        &trans        &kp SCROLLLOCK  &trans                                                &trans                     &kp PAUSE_BREAK  &trans                    &trans                    &trans                  &trans                     &bt BT_CLR
&trans  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &trans          &bl BL_TOG                                            &trans                     &trans           &trans                    &trans                    &trans                  &trans                     &trans
&trans  &trans        &trans        &trans        &trans        &trans          &bl BL_DEC  &trans  &trans            &trans  &trans  &bl BL_INC                 &kp LA(N3)       &kp LS(LA(LC(LG(LEFT))))  &kp LS(LA(LC(LG(DOWN))))  &kp LS(LC(LA(LG(UP))))  &kp LS(LA(LC(LG(RIGHT))))  &trans
&trans  &kp C_PREV    &kp C_VOL_DN  &kp C_VOL_UP  &kp C_NEXT    &trans                              &trans            &trans                                     &trans           &trans                    &trans                    &trans                  &trans                     &trans
&trans  &trans        &trans        &trans        &trans                        &to 0       &trans  &bt BT_SEL 0      &trans  &trans  &kp LS(LA(LC(LG(SPACE))))                   &trans                    &trans                    &trans                  &trans                     &trans
            >;

            label = "sys";
        };
    };
};
